	.IF ~LSTBOOT
	 .NOLIST
	.ELSE
	 .LIST
	.ENDC



;Copyright (c) 1978
;  by the Regents of the University of California, San Diego
;
;  The following modifications have been made by John Dykstra:
;
;	30 Dec 84 - Display a message if there is no SYSTEM.PASCAL on the
;		    bootstrap disk.
;	05-Apr-82 - Accept byte pointer to top of memory
;	12-Dec-81 - Interface to standard bootstrap
;

; Beginning of file BOOT


;****************BOOTSTRAP LOADERS****************;


;    The standard booter.  For primary booters that simply read in the interp
; This is a Pascal-system loader, it assumes that
;the complete interpreter and booter have been
;loaded by the host machine. It assumes that on
;unit 4 ,block 2 is a directory with the pascal
;operating system 'SYSTEM.PASCAL'. The booter
;reads this, initializes the interpreter to enter
;the system outer block and goes to it.

;     Six easy steps toward the realization of Pascal.
;  1: initialize all I/O drivers, size memory
;  2: read directory, find 'SYSTEM.PASCAL'
;  3: read block zero and set up SEGTBL
;  4: read in segment zero
;  5: set up machine state for seg 0 proc 1
;  6: GO FOR IT.

	; These declarations are for Step 2.
SYSTLE	.BYTE	0DH		;length byte of String
	.ASCII	"SYSTEM.PASCAL" ;characters of String

NOSYSMSG .ASCII "SYSTEM.PASCAL is not on bootstrap disk.  "
	.ASCII	"Bootstrap aborted."
L_NSMSG .EQU	$-NOSYSMSG	; LENGTH OF MESSAGE

IOERRMSG .ASCII "I/O error in interpreter boot "
L_IOMSG .EQU	$-IOERRMSG	; LENGTH OF MESSAGE

DENTSZ	.EQU	1AH		;directory entry size, bytes
DTITLE	.EQU	06H		;offset of title in an entry
DENTP	.WORD	0		;gets set by this Step

SYSBLK	.WORD	0
SEGCNT	.BYTE	0

;  Begin the bootstrap.
;
;  We enter here through the jump located just after the opcode dispatch
;  table at the beginning of the interpreter.  On entry, HL contains
;  a pointer to the top available byte in read/write memory, and
;  A contains the number of the bootstrap unit.

BOOT	;Start here and follow the yellow brick road.

	LD	SP,RELSEG+1000H ; Set temporary SP

	PROGRESS "Q"

	LD	A,0FEH		; MAKE BYTE ADDRESS INTO WORD ADDRESS
	AND	L
	LD	L,A
	LD	(MEMTOP),HL	; remember the top of memory

	LD	A,B		; convert to UCSD unit number
	ADD	A,4
	CP	5+1
	JR	C,$10

	ADD	A,3
$10	LD	(SYSUNT),A	;  becomes the system unit number

	;   Step 1
;Initialize all I/O drivers, size memory, and do any other
;  machine-specific stuff needed.

	CALL	IOINIT
	PROGRESS "R"

	.IF CML			; until we update COMPAL files
	 LD	A,0C3H		; set up keyboard interrupt vecto
	 LD	(38H),A
	 LD	HL,CHINT
	 LD	(39H),HL
	.ENDC


;   Step 2
;read directory from abs block 2 into
;memory just above the interp
;find system.pascal and leave the
;address of its direntry in DENTP
;
;	read in the directory
	LD	HL,(SYSUNT)	;unit number for booting
	PUSH	HL
	.IF	DEBUG
	LD	A,H
	CALL	HEXOUT
	LD	A,L
	CALL	HEXOUT
	.ENDC
	LD	HL,NRPTOP	;I/O buffer, way out there
	PUSH	HL
	LD	HL,0
	PUSH	HL
	LD	HL,04H*200H	;length, 4 blocks
	PUSH	HL
	LD	HL,02H		;DIR starts at block 2
	PUSH	HL
	CALL	SYSRD		; that does it folks
	CALL	CHKIOR		; Check for error
;	search dir
	LD	HL,FSTENT	 ;skip over entry 0, disk name
	LD	(DENTP),HL
	LD	C,00H
;		;(DENTP)=^DIR ENTRY, HL=^DIR.TITLE, DE=^SYSTITLE, C=counter
$20	;outer, loop on each dir entry
	PROGRESS "S"
	LD	DE,DTITLE	;inc HL to .TITLE in entry
	ADD	HL,DE
	LD	DE,SYSTLE	;set DE to title for comparison
	LD	B,0EH		;comp for length of title
$30	;inner, loop on characters
	LD	A,(DE)
	CP	(HL)
	JP	NZ,$40
	INC	DE
	INC	HL
	DJNZM	$30
	JP	FOUND
$40	; No match here - go to next dir entry
	LD	HL,(DENTP)
	LD	DE,DENTSZ
	ADD	HL,DE
	LD	(DENTP),HL
	DEC	C
	JP	NZ,$20
;
;  We did not find SYSTEM.PASCAL in the directory, so put out an error message
;  and hang.
;
	LD	HL,NOSYSMSG	; DISPLAY ERROR MESSAGE
	LD	BC,L_NSMSG
	MTRREQ	M_DSPTXT

$45	JR	$45		; HANG FOREVER

;
;  Check for I/O error passed back through IORSLT.
;
CHKIOR	LD	HL,(IORSLT)
	LD	A,L
	OR	H
	RET	Z
;
;  Disk I/O error encountered.  Display a message and hang.
;
	LD	HL,IOERRMSG	; DISPLAY ERROR MESSAGE
	LD	BC,L_IOMSG
	MTRREQ	M_DSPTXT

	.IF	DEBUG
	LD	HL,(IORSLT)
	LD	A,H
	CALL	HEXOUT
	LD	A,L
	CALL	HEXOUT
	.ENDC

$10	JR	$10




;   Step 3
;RELSEG .EQU	NRPTOP+800H	;address to read block 0 at, above dir
;SYSBLK .WORD	0		;amount to make rel seg blk nos absolute
;SEGCNT .BYTE	0

FOUND	;adrs left in DENTP
	;do the read
	PROGRESS "T"
	LD	HL,(SYSUNT)	;unit
	PUSH	HL
	LD	HL,RELSEG	;buffer
	PUSH	HL
	LD	HL,0
	PUSH	HL
	LD	HL,40H		;length, 16 entries
	PUSH	HL
	LD	HL,(DENTP)	;block, from directory
	LD	C,(HL)
	INC	HL
	LD	B,(HL)
	PUSH	BC
	LD	L,C
	LD	H,B
	LD	(SYSBLK),HL
	CALL	SYSRD
	CALL	CHKIOR		; Check for error
	;put stuff into SEGTBL
;			HL => RELSEG: array [0..15] of
;					DISKADR, relative block number
;					CODELEN	 length in bytes
;			DE => SEGTBL: array [0..15] of
;					UNIT, device index
;					BLOCK, absolute
;					LENGTH same as above
	PROGRESS "U"
	LD	A,10H		;loop control
	LD	(SEGCNT),A
	LD	DE,SEGTBL
	LD	HL,RELSEG
$50	LD	A,(SYSUNT)	;set SEGTBL.UNIT := 4
	LD	(DE),A
	INC	DE
	XOR	A
	LD	(DE),A
	INC	DE
	LD	C,(HL)		;BC := RELSEG.DISKADR
	INC	HL
	LD	B,(HL)
	INC	HL
	PUSH	HL		;calc abs block num
	LD	HL,(SYSBLK)
	ADD	HL,BC
	EX	DE,HL
	LD	(HL),E
	INC	HL
	LD	(HL),D
	INC	HL
	EX	DE,HL		;restore pointers
	POP	HL
	LD	A,(HL)		;set SEGTBL.LENGTH := RELSEG.CODELEN
	LD	(DE),A
	INC	DE
	INC	HL
	LD	A,(HL)
	LD	(DE),A
	INC	DE
	INC	HL
	LD	A,(SEGCNT)	;do this 16 times
	DEC	A
	LD	(SEGCNT),A
	JP	NZ,$50



;   Step 4
; read segment zero, pointed at by SEGTBL[0],
;into the highest memory address possible, up
;to MAXADR. Also set SP at bottom of code read in.

	PROGRESS "V"
	LD	HL,SEGTBL+04H	;get len of seg zero
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	LD	HL,(MEMTOP)
	INC	HL
	INC	HL
	SUBHLDE
	LD	SP,HL
	LD	A,(SYSUNT)	;unit
	LD	C,A
	LD	B,00H
	PUSH	BC
	PUSH	HL		;buffer
	LD	HL,0
	PUSH	HL
	PUSH	DE		;length
	LD	HL,(SEGTBL+02H) ; block
	PUSH	HL
	CALL	SYSRD

; Fill in internal seg table
	PROGRESS "W"
	LD	HL,INTSEGT+4
	LD	BC,-<MAXSEG*4>
	CLRA
$60	LD	(HL),A
	INC	HL
	INC	C
	JP	NZ,$60
	INC	B
	JP	NZ,$60
	LD	HL,1		; initialize entries for op sys
	LD	(INTSEGT),HL
	LD	HL,(MEMTOP)
	LD	(INTSEGT+2),HL


;   Step 5
; Initialize all P-machine registers including
;SP, NP, MP, BASE, IPC, JTAB, SEG.
;Create an initial stack frame and MSCW including
;the automagic ^SYSCOM parameter.

	LD	HL,(MEMTOP)
STEP5	LD	(SEGP),HL
	DEC	HL		;set JTAB := SEG^[-1]
	LD	B,(HL)
	DEC	HL
	LD	C,(HL)
	SUBHLBC			; self relative
	LD	(JTAB),HL
	DEC	HL		;set IPCSAV := JTAB^[-1]
	LD	B,(HL)
	DEC	HL
	LD	C,(HL)
	SUBHLBC			; self relative
	LD	(IPCSAV),HL
	LD	HL,(JTAB)	;new stack frame
	LD	BC,DATASZ
	ADD	HL,BC		; SP := SP-JTAB^[-8]
	LD	C,(HL)
	INC	HL
	LD	B,(HL)
	XOR	A
	SUB	C
	LD	L,A
	LD	A,00H
	SBC	A,B
	LD	H,A
	ADD	HL,SP
	LD	SP,HL
	LD	DE,SYSCOM	;^SYSCOM parameter
	PUSH	DE
	PUSH	HL		;create MSCW, dummy save state
	LD	HL,-04H		;address of an ABORT opcode
	ADD	HL,SP
	PUSH	HL
	LD	HL,00D6H	; an ABORT opcode
	PUSH	HL
	PUSH	HL
	LD	HL,-04H		;STAT and DYN must be self referencing
	ADD	HL,SP
	PUSH	HL
	PUSH	HL
	LD	(MP),HL		;set all MSCW pointers
	LD	(BASE),HL
	LD	BC,DISP0
	ADD	HL,BC
	LD	(MPD0),HL
	LD	(BASED0),HL
	LD	HL,INTEND		;set NP
	LD	(NP),HL



;   Step 6
; enable interrupts and do other junky stuff

	PROGRESS "X"

	RESTORE

	.ALIGN	2
NRPTOP	.EQU	$
RELSEG	.EQU	NRPTOP+800H
FSTENT	.EQU	NRPTOP+DENTSZ

	.END	GOLOC		;you learn to pray.

; End of file BOOT, and end of interpreter !


